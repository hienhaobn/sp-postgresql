services:
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    volumes:
      - ./target:/app/target:ro
    command: ["java", "-jar", "/app/target/app.jar"]
    ports:
      - "8080:8080"
    env_file: 
      - .env.${APP_ENV}
    environment:
      SPRING_PROFILES_ACTIVE: ${APP_ENV}
      SERVER_PORT: 8080
    depends_on:
      db:
        condition: service_healthy
    user: "appuser"
    restart: always
    networks:
      - app_network

  db:
    image: postgres:15-alpine
    env_file: .env.${APP_ENV}
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    networks:
      - app_network

volumes:
  postgres_data:
  pgbackup:
  maven-cache:

networks:
  app_network:
    driver: bridge
